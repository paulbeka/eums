name: Deploy to DigitalOcean

on:
  push:
    branches:
      - main

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies and build the app
        env:
          REACT_APP_BASE_URL: http://134.122.92.255:8000
        run: |
          cd frontend
          npm install
          npm run build

      - name: Verify build files before upload
        run: ls -R frontend/build

      - name: Archive the build directory
        run: zip -r build.zip frontend/build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: react-build
          path: build.zip

  deploy-to-do:
    runs-on: ubuntu-latest
    needs: build-frontend
    steps:
      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.DO_DEPLOY_KEY }}

      - name: Add DigitalOcean server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H 134.122.92.255 >> ~/.ssh/known_hosts

      - name: Download the build artifact
        uses: actions/download-artifact@v4
        with:
          name: react-build
          path: ./frontend-build/

      - name: Verify artifact download
        run: ls -R ./frontend-build

      - name: Deploy to DigitalOcean
        run: |
          # Copy the zip file to the frontend Docker container
          scp -i ~/.ssh/DO_DEPLOY_KEY ./frontend-build/build.zip root@134.122.92.255:/root/frontend-build.zip

          ssh root@134.122.92.255 << 'EOF'
            apt update
            apt install -y docker-compose unzip

            [ ! -d "eums" ] && git clone https://github.com/paulbeka/eums.git
            cd eums
            git stash
            git pull --force

            # Debugging: List the contents of the unzipped folder to verify
            ls -R /root

            # Unzip the frontend build files inside the frontend container
            rm -rf /root/frontend-build/unzipped
            mkdir -p /root/frontend-build/unzipped
            unzip /root/frontend-build.zip -d /root/frontend-build/unzipped

            # Prepare the frontend build files inside the frontend container
            rm -rf ./frontend/build
            mkdir -p ./frontend/build
            cp -r /root/frontend-build/unzipped/frontend/build/* ./frontend/build/

            mkdir -p ./frontend/nginx
            # Create custom Nginx configuration
            echo 'server {
                listen 80;
                server_name _;

                root /usr/share/nginx/html;
                index index.html;

                location / {
                    try_files $uri $uri/ /index.html;
                }
            }' > ./frontend/nginx/default.conf

            SCRIPT_PATH="./simple_bot/cron_setup.sh"
            CRON_SCHEDULE="0 * * * *" # Runs every hour at the start of the hour

            chmod +x "$SCRIPT_PATH"
            (crontab -l 2>/dev/null | grep -v "$SCRIPT_PATH"; echo "$CRON_SCHEDULE $SCRIPT_PATH") | crontab -

            echo "Current cron jobs:"
            crontab -l

            # Bring up the Docker containers with the updated build files
            docker-compose down
            docker-compose up --build -d
          EOF
